#!/usr/bin/env python
# Copyright (c) 2014 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import argparse
import getpass
import json
import logging
import os
import urlparse

import sys
import requests


# The following monkey-patching is required to get json.dumps float rounding nicer,
# for intensity 0.9 we got 0.8999999761581421, but now we get 0.900
from json import encoder

encoder.FLOAT_REPR = lambda o: format(o, '.3f')

USER = getpass.getuser()
DEFAULT_CAUSE = "manual spreaper run"

log_level = logging.WARN
if "-v" in sys.argv or "--verbose" in sys.argv:
    log_level = logging.DEBUG
logging.basicConfig(level=log_level, format='%(asctime)s %(levelname)s - %(message)s')

log = logging.getLogger("spreaper")
log.debug("logging initialized, the user running spreaper: {0}".format(USER))


# === ReaperCaller deals with talking to the Reaper =====================================

class ReaperCaller(object):
    """Implements the functionality for calling the Reaper service.
    Keep the CLI specific stuff in ReaperCLI.
    """

    def __init__(self, host_name, host_port, use_ssl):
        self.base_url = "{0}://{1}:{2}".format(use_ssl and 'https' or 'http',
                                               str(host_name), int(host_port))

    def _http_req(self, http_method, the_url, params=None):
        http_method = http_method.upper()
        if params is None:
            params = {}
        log.info("making HTTP %s to %s", http_method, the_url)
        if http_method == 'GET':
            r = requests.get(the_url, params=params)
        elif http_method == 'POST':
            r = requests.post(the_url, params=params)
        elif http_method == 'PUT':
            r = requests.put(the_url, params=params)
        else:
            assert False, "invalid HTTP method: {0}".format(http_method)
        log.info("HTTP %s return code %s with content of length %s",
                 http_method, r.status_code, len(str(r.text)))
        log.debug("Response content:\n%s", r.text)
        if not str(r.status_code).startswith("2"):
            print r.text
        r.raise_for_status()
        return r.text

    def get(self, endpoint):
        the_url = urlparse.urljoin(self.base_url, endpoint)
        return self._http_req("GET", the_url)

    def post(self, endpoint, **params):
        the_url = urlparse.urljoin(self.base_url, endpoint)
        return self._http_req("POST", the_url, params)

    def put(self, endpoint, **params):
        the_url = urlparse.urljoin(self.base_url, endpoint)
        return self._http_req("PUT", the_url, params)


# === Arguments for commands ============================================================


def _global_arguments(parser, command):
    """Arguments relevant for every CLI command"""
    if 'REAPER_HOST' in os.environ:
        default_reaper_host = os.environ.get('REAPER_HOST')
    else:
        default_reaper_host = 'localhost'

    if 'REAPER_PORT' in os.environ:
        default_reaper_port = os.environ.get('REAPER_PORT')
    else:
        default_reaper_port = '8080'

    group = parser.add_argument_group('global arguments')
    group.add_argument("--reaper-host", default=default_reaper_host,
                       help="hostname of the Reaper service [{0}]".format(default_reaper_host))
    group.add_argument("--reaper-port", default=default_reaper_port,
                       help="port of the Reaper service [{0}]".format(default_reaper_port))
    group.add_argument("--reaper-use-ssl", default=False, action='store_true',
                       help="use https to call Reaper [False]")
    group.add_argument("-v", "--verbose", help="increase output verbosity",
                       action="store_true")
    parser.add_argument(command)


def _arguments_for_status_cluster(parser):
    """Arguments relevant for querying cluster status"""
    parser.add_argument("cluster_name", help="the cluster name")


def _arguments_for_status_keyspace(parser):
    """Arguments relevant for querying cluster keyspace status"""
    parser.add_argument("cluster_name", help="the cluster name")
    parser.add_argument("keyspace_name", help="the keyspace name")


def _arguments_for_status_repair(parser):
    """Arguments relevant for querying a repair status"""
    parser.add_argument("run_id", help="identifier of the run to fetch more info about")


def _arguments_for_status_schedule(parser):
    """Arguments relevant for querying a repair schedule status"""
    parser.add_argument("schedule_id", help="identifier of the schedule to fetch more info about")


def _arguments_for_add_cluster(parser):
    """Arguments relevant for registering a cluster"""
    parser.add_argument("seed_host", help="the seed host of the Cassandra cluster to be registered")


def _arguments_for_repair_and_start(parser):
    parser.add_argument("--cause", default=DEFAULT_CAUSE,
                        help="cause string used for logging and auditing "
                             "purposes [\"{0}\"]".format(DEFAULT_CAUSE))


def _arguments_for_repair(parser):
    _arguments_for_repair_and_schedule(parser)
    _arguments_for_repair_and_start(parser)
    parser.add_argument("--start-repair", action='store_true',
                        help="start the repair run immediately after registering it")


def _arguments_for_repair_and_schedule(parser):
    """Arguments relevant for registering a repair and optionally triggering it,
    either immediately or in scheduled manner.
    """
    parser.add_argument("cluster_name",
                        help="the name of the target Cassandra cluster")
    parser.add_argument("keyspace_name",
                        help="the keyspace name in the Cassandra cluster")
    parser.add_argument("--tables", default=None,
                        help=("a comma separated list of tables within a keyspace "
                              "in the Cassandra cluster (do not use spaces after commas)"))
    parser.add_argument("--owner", default=USER,
                        help="name of local user calling the Reaper [\"{0}\"]".format(USER))
    parser.add_argument("--segment-count", default=None,
                        help=("amount of segments to create for the repair run, "
                              "or use the configured default if not given"))
    parser.add_argument("--repair-parallelism", default=None,
                        help=("the repair parallelism level to use for new repair run, "
                              "or use the configured default if not given"))
    parser.add_argument("--intensity", default=None,
                        help=("repair intensity float value (between 0.0 and 1.0), "
                              "or use the configured default if not given"))


def _arguments_for_scheduling(parser):
    """Arguments relevant to scheduling repair runs."""
    _arguments_for_repair_and_schedule(parser)
    parser.add_argument("--schedule-days-between", default=None,
                        help="how many days between repair triggerings, e.g. 7 for weekly schedule")
    parser.add_argument("--schedule-trigger-time", default=None,
                        help="at which time to trigger the first repair (UTC), "
                             "e.g. \"2015-02-10T15:00:00\"")


def _arguments_for_start(parser):
    """Arguments relevant for starting a repair"""
    _arguments_for_repair_and_start(parser)
    parser.add_argument("run_id", help="ID of the repair run to start or resume")


def _arguments_for_pause(parser):
    """Arguments needed for pausing or resuming a repair"""
    parser.add_argument("run_id", help="ID of the repair run to pause")


def _parse_arguments(command, description, usage=None, extra_arguments=None):
    """Generic argument parsing done by every command"""
    parser = argparse.ArgumentParser(description=description, usage=usage)
    _global_arguments(parser, command)
    if extra_arguments:
        extra_arguments(parser)
    return parser.parse_args()


# === The actual CLI ========================================================================

SPREAPER_DESCRIPTION = \
    """Cassandra Reaper is a centralized, stateful, and highly configurable
    tool for running Cassandra repairs for multi-site clusters.
    This CLI tool is used to control the Cassandra Reaper service through
    its REST API.

    First register your cluster with "add-cluster" command,
    and then start repairing the cluster with "repair" command
    giving the cluster name registered in the Reaper.
    You can also schedule regular repairs for registered clusters.
    """

REAPER_USAGE = SPREAPER_DESCRIPTION + """
Usage: spreaper [<global_args>] <command> [<command_args>]

<command> can be:
    list-clusters   List all registered Cassandra clusters.
    list-schedules  List registered repair schedules for a cluster.
    status-cluster  Show status of a Cassandra cluster,
                    and any existing repair runs for the cluster.
    status-keyspace Show status of a keyspace in a cluster.
    status-repair   Show status of a repair run.
    status-schedule Show status of a repair schedule.
    add-cluster     Register a cluster.
    repair          Create a repair run, optionally starting it. You need to register
                    a cluster into Reaper (add-cluster) before calling repair.
    schedule        Create a repair schedule, choosing the first activation time and days
                    between repair activations. You need to register a cluster into
                    Reaper (add-cluster) before calling this.
    start           Start a repair run, or resume paused repair run.
    pause           Pause a repair run.
    ping            Test connectivity to the Reaper service.
"""


class ReaperCLI(object):
    """Aim of this class is to separate CLI (argparse) specific stuff
    from the actual logic of calling the Reaper service."""

    def __init__(self):
        if len(sys.argv) < 2:
            print REAPER_USAGE
            exit(1)
        commands = [arg for arg in sys.argv[1:] if not arg[0].startswith('-')]
        if len(commands) < 1:
            print REAPER_USAGE
            exit(1)
        command = commands[0].replace('-', '_')
        if not hasattr(self, command):
            print 'Unrecognized command: {0}'.format(command)
            print REAPER_USAGE
            exit(1)
        # use dispatch pattern to invoke method with same name as given command
        try:
            getattr(self, command)()
        except requests.exceptions.HTTPError, err:
            print ""
            print "# HTTP request failed with err: {}".format(err)
            exit(2)

    @staticmethod
    def prepare_reaper(command, description, usage=None, extra_arguments=None):
        args = _parse_arguments(command, description, usage, extra_arguments)
        reaper = ReaperCaller(args.reaper_host, args.reaper_port, args.reaper_use_ssl)
        return reaper, args

    def ping(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "ping",
            "Test connectivity to the Reaper service."
        )
        print "# Sending PING to Reaper..."
        answer = reaper.get("ping")
        print "# [Reply]", answer
        print "# Cassandra Reaper is answering in: {0}:{1}".format(args.reaper_host,
                                                                   args.reaper_port)

    def list_clusters(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "list-clusters",
            "List all registered Cassandra clusters."
        )
        print "# Listing all registered Cassandra clusters"
        cluster_names = json.loads(reaper.get("cluster"))
        if cluster_names:
            print "# Found {0} clusters:".format(len(cluster_names))
            for cluster_name in cluster_names:
                print cluster_name
        else:
            print "# No registered clusters found"

    def list_schedules(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "list-schedules",
            "List registered repair schedules for a cluster.",
            extra_arguments=_arguments_for_status_cluster
        )
        print "# Listing registered repair schedules for cluster '{0}'".format(args.cluster_name)
        schedules_data = json.loads(
            reaper.get("repair_schedule/cluster/{0}".format(args.cluster_name)))
        print "# Found {0} schedules:".format(len(schedules_data))
        print json.dumps(schedules_data, indent=2, sort_keys=True)

    def status_cluster(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "status-cluster",
            "Show status of a Cassandra cluster, and any existing repair runs for the cluster.",
            extra_arguments=_arguments_for_status_cluster
        )
        print "# Cluster '{0}':".format(args.cluster_name)
        cluster_data = reaper.get("cluster/{0}".format(args.cluster_name))
        print json.dumps(json.loads(cluster_data), indent=2, sort_keys=True)

    def status_keyspace(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "status-keyspace",
            "Show status of a keyspace in a Cassandra cluster.",
            extra_arguments=_arguments_for_status_keyspace
        )
        print "# Cluster '{0}', keyspace '{1}':".format(args.cluster_name, args.keyspace_name)
        keyspace_data = reaper.get("cluster/{0}/{1}".format(args.cluster_name, args.keyspace_name))
        print json.dumps(json.loads(keyspace_data), indent=2, sort_keys=True)

    def status_repair(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "status-repair",
            "Show status of a repair run.",
            extra_arguments=_arguments_for_status_repair
        )
        print "# Repair run with id '{0}':".format(args.run_id)
        repair_run_data = reaper.get("repair_run/{0}".format(args.run_id))
        print json.dumps(json.loads(repair_run_data), indent=2, sort_keys=True)

    def status_schedule(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "status-schedule",
            "Show status of a repair schedule.",
            extra_arguments=_arguments_for_status_schedule
        )
        print "# Repair schedule with id '{0}':".format(args.schedule_id)
        repair_schedule_data = reaper.get("repair_schedule/{0}".format(args.schedule_id))
        print json.dumps(json.loads(repair_schedule_data), indent=2, sort_keys=True)

    def add_cluster(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "add-cluster",
            "Register a cluster.",
            extra_arguments=_arguments_for_add_cluster
        )
        print "# Registering Cassandra cluster with seed host: {0}".format(args.seed_host)
        cluster_data = reaper.post("cluster", seedHost=args.seed_host)
        print "# Registration succeeded:"
        print json.dumps(json.loads(cluster_data), indent=2, sort_keys=True)

    def repair(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "repair",
            "Create a repair run, optionally starting it. You need to register a cluster "
            "into Reaper (add-cluster) before calling this.",
            extra_arguments=_arguments_for_repair
        )
        if not args.keyspace_name or not args.cluster_name:
            print "# Please specify a cluster, and a keyspace"
            exit(1)
        if args.tables:
            print ("# Registering repair run for cluster '{0}', and keyspace '{1}', "
                   "targeting tables: {2}").format(args.cluster_name, args.keyspace_name,
                                                   ",".join(args.tables.split(',')))
            reply = reaper.post("repair_run", clusterName=args.cluster_name,
                                keyspace=args.keyspace_name, tables=args.tables,
                                owner=args.owner, cause=args.cause,
                                segmentCount=args.segment_count,
                                repairParallelism=args.repair_parallelism,
                                intensity=args.intensity)
        else:
            print ("# Registering repair run for cluster '{0}', and keyspace '{1}', "
                   "targeting all tables in the keyspace").format(args.cluster_name,
                                                                  args.keyspace_name)
            reply = reaper.post("repair_run", clusterName=args.cluster_name,
                                keyspace=args.keyspace_name, owner=args.owner, cause=args.cause,
                                segmentCount=args.segment_count,
                                repairParallelism=args.repair_parallelism,
                                intensity=args.intensity)
        repair_run = json.loads(reply)
        print "# Repair run with id={0} created:".format(repair_run.get('id'))
        print json.dumps(repair_run, indent=2, sort_keys=True)
        if args.start_repair:
            self._change_run_state(reaper, repair_run.get('id'), args, "RUNNING")

    def schedule(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "schedule",
            "Create a repair schedule, choosing the first activation time and days between "
            "repair activations. You need to register a cluster into Reaper (add-cluster) "
            "before calling this.", extra_arguments=_arguments_for_scheduling
        )
        if not args.keyspace_name or not args.cluster_name:
            print "# Please specify a cluster, and a keyspace"
            exit(1)
        if not args.schedule_days_between:
            print "# Please specify repair schedule by giving at least value for " \
                  "schedule-days-between parameter"
            exit(1)
        if args.tables:
            print ("# Registering repair schedule for cluster '{0}', and keyspace '{1}', "
                   "targeting tables: '{2}', with scheduled days between triggerings '{3}', "
                   "and triggering time: {4}").format(
                args.cluster_name, args.keyspace_name, ",".join(args.tables.split(',')),
                args.schedule_days_between, args.schedule_trigger_time)
            reply = reaper.post("repair_schedule", clusterName=args.cluster_name,
                                keyspace=args.keyspace_name, tables=args.tables,
                                owner=args.owner, segmentCount=args.segment_count,
                                repairParallelism=args.repair_parallelism,
                                intensity=args.intensity,
                                scheduleDaysBetween=args.schedule_days_between,
                                scheduleTriggerTime=args.schedule_trigger_time)
        else:
            print ("# Registering repair schedule for cluster '{0}', and keyspace '{1}', "
                   "targeting all tables in the keyspace, with scheduled days between "
                   "triggerings '{2}', and triggering time: {3}").format(
                args.cluster_name, args.keyspace_name,
                args.schedule_days_between, args.schedule_trigger_time)
            reply = reaper.post("repair_schedule", clusterName=args.cluster_name,
                                keyspace=args.keyspace_name, owner=args.owner,
                                segmentCount=args.segment_count,
                                repairParallelism=args.repair_parallelism,
                                intensity=args.intensity,
                                scheduleDaysBetween=args.schedule_days_between,
                                scheduleTriggerTime=args.schedule_trigger_time)
        repair_schedule = json.loads(reply)
        print "# Repair schedule with id={0} created:".format(repair_schedule.get('id'))
        print json.dumps(repair_schedule, indent=2, sort_keys=True)

    def start(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "start",
            "Start new repair run, or resume a paused repair run.",
            extra_arguments=_arguments_for_start
        )
        self._change_run_state(reaper, args.run_id, args, "RUNNING")

    def pause(self):
        reaper, args = ReaperCLI.prepare_reaper(
            "pause",
            "Pause a running repair run.",
            extra_arguments=_arguments_for_pause
        )
        print "# Pausing a repair run with id: {0}".format(args.run_id)
        reaper.put("repair_run/{0}".format(args.run_id), state="PAUSED")
        print "# Repair run '{0}' paused".format(args.run_id)

    def _change_run_state(self, reaper, run_id, args, st):
        print "# Starting a repair run with id: {0}".format(run_id)
        reaper.put("repair_run/{0}".format(run_id), owner=hasattr(args, 'owner') and args.owner or USER, cause=args.cause, state=st)
        print "# Run '{0}' started".format(run_id)


if __name__ == '__main__':
    print("# Report improvements/bugs at https://github.com/spotify/cassandra-reaper/issues")
    print("# ------------------------------------------------------------------------------")
    ReaperCLI()
